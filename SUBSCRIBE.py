import re
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
import asyncio
from .. import loader

@loader.tds
class SUBMod(loader.Module):
    """–ú–æ–¥—É–ª—å –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã.
           Commands: /sub, /reconf\n
    ‚öôÔ∏è By @pavlyxa_rezon\n"""

    strings = {"name": "BGL-SUBSCRIBE"}
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "chat_owner_id", -1002187569778, "–ì—Ä—É–ø–ø–∞ —Å–æ –≤–≤–æ–¥–æ–º –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä–æ–≤.",
                validator=loader.validators.Integer(),
            ),
            loader.ConfigValue(
                "chat_logs_id", -1002187569778, "–ì—Ä—É–ø–ø–∞ —Å –≤—ã–≤–æ–¥–æ–º –≤—Å–µ—Ö –ª–æ–≥–æ–≤.",
                validator=loader.validators.Integer(),
            ),
            loader.ConfigValue(
                "logger_enabled", False, "–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –ª–æ–≥–≥–µ—Ä–∞ (0/1).",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "host_number", 1, "–ù–æ–º–µ—Ä —Ö–æ—Å—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã.",
                validator=loader.validators.Integer(),
            ),
            loader.ConfigValue(
                "owner_list", [922318957, 1868227136], "–°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å–∫–æ–≤ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é.",
                validator=loader.validators.Series(validator=loader.validators.Integer())
            )
        )

    def get_delay_host(self):
        """–ó–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ (–≤ —Ä–∞–∑–≤–∏—Ç–∏–∏)"""
        delay_seconds = self.config["host_number"] * 10
        return delay_seconds
        
    async def delay_host(self):
        """–ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"""
        delay_seconds = self.get_delay_host()
        await asyncio.sleep(delay_seconds)
        return delay_seconds

    async def send_module_message(self, text, chat_id=None, delay_info=None):
        """–≠—Ç–æ–π —à–∞—Ä–º–∞–Ω–∫–æ–π –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥—É–ª–µ–π"""
        if not self.config["logger_enabled"]:
            return
        try:
            if chat_id is None:
                chat_id = self.config["chat_logs_id"]
            delay_text = f", Delay: {delay_info} —Å–µ–∫" if delay_info else ""
            logger_message = f"üíª <b>Server: {self.config['host_number']}{delay_text}</b>\n\n{text}"
            await self.client.send_message(chat_id, logger_message, link_preview=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def send_config_message(self, text, chat_id=None):
        """–≠—Ç–æ–π —à–∞—Ä–º–∞–Ω–∫–æ–π –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–æ–≤"""
        if chat_id is None:
            chat_id = self.config["chat_logs_id"]
        logger_message = f"üíª <b>Server: {self.config['host_number']}: </b>{text}"
        await self.client.send_message(chat_id, logger_message)

    async def subscribe_full(self, target):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –ø–æ —Å—Å—ã–ª–∫–µ –∏ —Ç–µ–≥—É"""
        done_message = f"<b>‚úÖ SUBSCRIBE:</b> {target}"
        fail_message = f"<b>üö´ SUB ERROR:</b> {target}"
        try:
            await self.client(JoinChannelRequest(channel=target))
            await self.send_module_message(done_message, delay_info=self.get_delay_host())
        except:
            try:
                invite_hash = target.split("t.me/+")[1]
                await self.client(ImportChatInviteRequest(invite_hash))
                await self.send_module_message(done_message, delay_info=self.get_delay_host())
            except Exception as e:
                await self.send_module_message(f"{fail_message}\n–û—à–∏–±–∫–∞: {e}", delay_info=self.get_delay_host())

    async def update_config(self, config_name, new_value):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        if config_name in self.config:
            try:
                if isinstance(self.config[config_name], bool):
                    new_value = new_value.lower() in ['true', '1', 'yes']
                elif isinstance(self.config[config_name], int):
                    new_value = int(new_value)
                self.config[config_name] = new_value
                done_message = f"<b>‚úÖ CONFIG:\n–ê—Ä–≥—É–º–µ–Ω—Ç {config_name} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_value}.</b>"
                await self.send_config_message(done_message)
            except Exception as e:
                fail_message = f"<b>üö´ CONFIG ERROR:</b>\n{e}"
                await self.send_config_message(fail_message)
        else:
            fail_message = f"<b>üö´ CONFIG ERROR:\n</b>–ê—Ä–≥—É–º–µ–Ω—Ç {config_name} –Ω–µ –Ω–∞–π–¥–µ–Ω."
            await self.send_config_message(fail_message)

    async def handle_subscribe(self, text):
        """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
        target = text.split("/sub", 1)[1].strip()
        await self.delay_host()
        await self.subscribe_full(target)

    async def handle_configurator(self, text):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª—é–±—ã—Ö –∫–æ–Ω—Ñ–∏–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        parts = text.split()
        if len(parts) < 4:
            return     
        
        config_name = parts[1]
        new_value = parts[2]
        taglist = parts[3:]
        user = await self.client.get_me()

        for tag in taglist:
            if tag == f"@{user.username}":
                await self.update_config(config_name, new_value)

    @loader.watcher()
    async def watcher_group(self, message):
        """–°—é–¥–∞ –µ–±–∞—à–∏–º —Ç–æ–ª—å–∫–æ –≤—ã–∑–æ–≤—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        if message.chat_id != self.config["chat_owner_id"]:
            return

        try:
            if message.message.startswith("/sub"):
                await self.handle_subscribe(message.message)
            elif message.message.startswith("/reconf"):
                await self.handle_configurator(message.message)
        except:
            pass
