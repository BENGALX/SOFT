import re
from telethon.tl.types import Message
from .. import loader, utils
from telethon.tl import functions
import asyncio

@loader.tds
class MANUALMod(loader.Module):
    """–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏.
           Commands: /manual @\n
    ‚öôÔ∏è By @pavlyxa_rezon\n"""

    strings = {
        "name": "BGL-MANUAL",
        "manual_main": (
            "<b>üíª –ú–æ–¥—É–ª—å: BGL-CHANNELS</b>\n\n"
            "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–æ–¥—É–ª—è. "
            "–ë–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–Ω —Ç–æ–∂–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ —á—Ç–æ.\n\n"
        ),
        "manual_basic": (
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ —É—Å–ª–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–æ–∏—Ç –≥—Ä—É–ø–ø–∞ 1). "
            "–î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∏–º –∫–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–ø–æ 15-20 –∞–∫–∫–∞—É–Ω—Ç–æ–≤). "
            "–≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –≤ –•*20 —Å–µ–∫—É–Ω–¥.\n\n"
            "–î–∞–ª–µ–µ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–æ). "
            "–¢–∞–∫ –ª–æ–≥–∏ –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä—è–º–æ –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É.\n"
        ),
        "manual_config": (
            "<b>üîó –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n"
            "CMD: /reconf [name] [value] [acc]\n\n"
            "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ã\n</b>"
            "‚Äîlogger ‚Äî –±—É–ª–µ–≤—ã–π —Å—Ç–∞—Ç—É—Å (True/False, 1/0, yes/no).\n"
            "‚Äîgroup ‚Äî –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
            "‚Äîacc ‚Äî –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —é–∑–µ—Ä–æ–≤, –≥–¥–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ (all –¥–ª—è –≤—Å–µ—Ö).\n"
        ),
        "manual_subscr": (
            "<b>üîó –ü–æ–¥–ø–∏—Å–∫–∏: /sub [target]</b>\n"
            "PUBLIC: https://t.me/, t.me/ –∏–ª–∏ @\n"
            "PRIVATE: https://t.me/+, t.me/+\n"
        ),
        "manual_unsubs": (
            "<b>üîó –û—Ç–ø–∏—Å–∫–∏: /uns [target]</b>\n"
            "PUBLIC: https://t.me/, //t.me/ –∏–ª–∏ @\n"
            "PRIVATE: ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ 100... (–±–µ–∑ –º–∏–Ω—É—Å–∞).\n"
        ),
        "back": "–ù–∞–∑–∞–¥"
    }
    
    def __init__(self):
        self.owner_list = [922318957]
        self.owner_chat = -1002205010643

    @loader.unrestricted
    async def send_manual_message(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /manual"""
        image_url = "https://raw.githubusercontent.com/BENGALX/SOFT/bengal/IMAGE/BENGAL.jpg"
        await self.inline.form(
            self.owner_chat,
            text=self.strings["manual_main"],
            message=None,
            image=image_url,
            reply_markup=
            [
                [
                    {"text": "Readme", "callback": self.inline__manual_basic},
                    {"text": "Config", "callback": self.inline__manual_config}
                ],
                [
                    {"text": "Subscribe", "callback": self.inline__manual_subscr},
                    {"text": "UnSubscr", "callback": self.inline__manual_unsubs}
                ],
            ],
        )

    @loader.inline_callback("manual_basic")
    async def inline__manual_basic(self, call):
        await call.edit(
            text=self.strings["manual_basic"],
            reply_markup=[[{"text": self.strings["back"], "callback": self.inline__back}]],
        )
        
    @loader.inline_callback("manual_config")
    async def inline__manual_config(self, call):
        await call.edit(
            text=self.strings["manual_config"],
            reply_markup=[
                [
                    {"text": self.strings["back"], "callback": self.inline__back}
                ]
            ],
        )

    @loader.inline_callback("manual_subscr")
    async def inline__manual_subscr(self, call):
        await call.edit(
            text=self.strings["manual_subscr"],
            reply_markup=[
                [
                    {"text": self.strings["back"], "callback": self.inline__back}
                ]
            ],
        )

    @loader.inline_callback("manual_subscr")
    async def inline__manual_unsubs(self, call):
        await call.edit(
            text=self.strings["manual_unsubs"],
            reply_markup=[
                [
                    {"text": self.strings["back"], "callback": self.inline__back}
                ]
            ],
        )

    @loader.inline_callback("manual_main")
    async def inline__back(self, call):
        await call.edit(
            text=self.strings["manual_main"],
            reply_markup=
            [
                    [
                        {"text": "Readme", "callback": self.inline__manual_basic},
                        {"text": "Config", "callback": self.inline__manual_config}
                    ],
                    [
                        {"text": "Subscribe", "callback": self.inline__manual_subscr},
                        {"text": "UnSubscr", "callback": self.inline__manual_unsubs}
                    ],
                ],
        )

    async def handle_manual(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /manual"""
        parts = text.split()
        if len(parts) < 2:
            return

        user = await self.client.get_me()
        if parts[1] == f"@{user.username}":
            await self.send_manual_message()
        else:
            return
    
    @loader.watcher()
    async def watcher_group(self, message):
        """Handle commands calling"""
        if message.chat_id != self.owner_chat:
            return
        if message.sender_id not in self.owner_list:
            return
        try:
            if message.message.startswith("/manual"):
                await self.handle_manual(message.message)
        except:
            pass
