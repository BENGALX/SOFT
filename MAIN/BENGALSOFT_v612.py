import re
import asyncio
from .. import loader, utils

from telethon.tl import functions
from telethon.tl.types import Message, PeerChannel

from telethon.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest, StartBotRequest, GetMessagesViewsRequest

@loader.tds
class BENGALSOFTMod(loader.Module):
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —Å–æ—Ñ—Ç–µ—Ä–æ–≤.
           Full Info: /manual @\n
    ‚öôÔ∏è By @pavlyxa_rezon\n"""

    strings = {
        "name": "BENGALSOFT",
        "manual_command": (
            f"<b>‚öôÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–¥—É–ª—è</b>\n"
            f"<b>‚ôªÔ∏è –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:</b>\n"
            f"‚ñ™Ô∏èhttps://t.me/ ‚Äî –ø–æ–ª–Ω–∞—è\n"
            f"‚ñ™Ô∏èt.me/ ‚Äî —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è\n"
            f"‚ñ™Ô∏è@tag ‚Äî –ø—É–±–ª–∏—á–Ω—ã–π —Ç–µ–≥\n\n"
            f"<b>üîó SUBSCRIBE: /sub [target]</b>\n"
            f"‚ñ™Ô∏èPUBLIC: –ª—é–±—ã–µ.\n"
            f"‚ñ™Ô∏èPRIVATE: t.me/+\n\n"
            f"<b>üîó UNSUBSCRIBE: /uns [target]</b>\n"
            f"‚ñ™Ô∏èPUBLIC: –ª—é–±—ã–µ.\n"
            f"‚ñ™Ô∏èPRIVATE: ID –±–µ–∑ -\n\n"
            f"<b>üîó BUTTON PUSH: /run [link]</b>\n"
            f"‚ñ™Ô∏èPUBLIC: t.me/\n"
            f"‚ñ™Ô∏èPRIVATE: t.me/c/\n\n"
            f"<b>üîó REFERAL START: /ref [link]</b>\n"
            f"‚ñ™Ô∏è[BOT]?start=[KEY]\n"
            f"‚ñ™Ô∏èSUPPORTED BOT:\n@BestRandom_bot\n@TheFastes_Bot\n@TheFastesRuBot\n@GiveawayLuckyBot\n@best_contests_bot\n\n"
        ),
        "manual_basic": (
            f"<b>üîê –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
            f"/config set [p] [nv] [us]\n"
            f"‚ñ™Ô∏è[p] ‚Äî –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π\n"
            f"‚ñ™Ô∏è[nv] ‚Äî –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n"
            f"‚ñ™Ô∏è[us] ‚Äî @(1 |–Ω–µ—Å–∫.| all)\n\n"
            f"<b>‚öôÔ∏è –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</b>\n"
            "‚ñ™Ô∏è–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å—Ç–æ–∏—Ç 1). "
            f"–ù–µ –ø—É—Ç–∞–π—Ç–µ –≥—Ä—É–ø–ø—É (–ø–∞—á–∫–∞ —Ç–≤–∏–Ω–∫–æ–≤, –∏—Ö –º–Ω–æ–≥–æ) —Å –≥—Ä—É–ø–ø–æ–π (—á–∞—Ç, —É –Ω–∞—Å –æ–Ω –æ–¥–∏–Ω). –ò—Ö —Å—Ç–∞–≤–∏–º –ø–æ 5-10 –∞–∫–∫–æ–≤. "
            f"–≠—Ç–æ –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞–¥–µ—Ä–∂–∫–∏ —Ö20 —Å–µ–∫, –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            f"/config set group 2 @u1\n"
            f"/config set group 5 @u5 @u7\n\n"
            f"‚ñ™Ô∏è–î–∞–ª–µ–µ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ –∞–∫–∫–æ–≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–æ). "
            f"–õ–æ–≥–≥–µ—Ä —É –Ω–∞—Å –±—É–ª–µ–≤—ã–π ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è True/False, 1/0, on/off –∏ —Ç.–ø. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            f"/config set logger 1 @u1 @u6\n"
            f"/config set logger False all\n"
        )
    }
    
    def __init__(self):
        self.owner_list = [922318957]
        self.owner_chat = -1002205010643
        self.owner_logs = -1002205010643
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "logger", False, "–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –ª–æ–≥–≥–µ—Ä–∞.",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "group", 1, "–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∞–∫–∫–æ–≤.",
                validator=loader.validators.Integer(),
            )
        )

    async def delay_host(self, delay_s):
        """–ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"""
        await asyncio.sleep(delay_s)
    
    def get_delay_host(self, mult=None):
        """–†–∞—Å—Å—á–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        default_mult = 20
        mult = int(mult) if mult else default_mult
        delay_s = self.config["group"] * mult
        return mult, delay_s

    async def get_user_info(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        user = await self.client.get_me()
        if user.username:
            twink = f"@{user.username}"
        else:
            twink = None
        return twink
    

    async def send_done_message(self, text, delay_info=None):
        """–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥—É–ª—è"""
        try:
            if delay_info is not None:
                mult, delay_s = delay_info
                delay_text = f", M: x{mult}, KD: {delay_s} sec."
            else:
                delay_text = ", Delay NONE"
            logger_message = f"üíª <b>GROUP: {self.config['group']}{delay_text}</b>\n{text}"
            await self.client.send_message(self.owner_logs, logger_message, link_preview=False)
        except:
            pass

    async def send_error_message(self, text):
        """–õ–æ–≥–∏ –æ—à–∏–±–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥—É–ª—è"""
        try:
            logger_message = f"{text}"
            await self.client.send_message(self.owner_logs, logger_message, link_preview=False)
        except:
            pass

    async def send_manual_message(self):
        """–í—ã–≤–æ–¥ –º–∞–Ω—É–∞–ª–∞ –ø–æ –º–æ–¥—É–ª—é"""
        try:
            image_url = "https://raw.githubusercontent.com/BENGALX/SOFT/bengal/IMAGE/BENGAL.jpg"
            image_cpt = f"<b>‚öôÔ∏è BENGALSOFT for BENGAL\nüíª By @pavlyxa_rezon"
            twink = await self.get_user_info()
            next_text = (
                f"<b>‚öôÔ∏è –°–ø–∏—Å–æ–∫ –º–∞–Ω—É–∞–ª–æ–≤ –º–æ–¥—É–ª—è:\n\n"
                f"<b>‚ñ™Ô∏è–ú–∞–Ω—É–∞–ª –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:</b>\n<code>/manual basic {twink}</code>\n\n"
                f"<b>‚ñ™Ô∏è–ú–∞–Ω—É–∞–ª –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n<code>/manual command {twink}</code>\n\n"
                f"<b>‚ñ™Ô∏è–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n<code>/config self {twink}</code>\n"
            )
            await self.client.send_file(
                self.owner_chat,
                file=image_url,
                caption=image_cpt
            )
            await asyncio.sleep(2)
            await self.client.send_message(self.owner_chat, next_text)
        except Exception as e:
            await self.client.send_message(self.owner_chat, f"üö´ ERROR in send_manual_message: {e}")

    async def send_config_message(self):
        """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            variables = ''.join([f"‚ñ™Ô∏è<b>{key}</b> {value}.\n" for key, value in self.config.items()])
            configuration = (
                f"<b>üîí –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã:</b>\n"
                f"‚ñ™Ô∏è<b>owner_list</b> {self.owner_list}.\n"
                f"‚ñ™Ô∏è<b>owner_chat</b> {self.owner_chat}.\n"
                f"‚ñ™Ô∏è<b>owner_logs</b> {self.owner_logs}.\n\n"
                f"<b>üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</b>\n" + variables
            )
            await self.client.send_message(self.owner_chat, configuration)
        except Exception as e:
            await self.client.send_message(self.owner_chat, f"üö´ ERROR in send_configuration_message: {e}")

    async def send_basic_message(self):
        """–í—ã–≤–æ–¥ –±–∞–∑–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        try:
            await self.client.send_message(self.owner_chat, self.strings["manual_basic"])
        except Exception as e:
            await self.client.send_message(self.owner_chat, f"üö´ ERROR in send_manual_message: {e}")

    async def send_command_message(self):
        """–í—ã–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è."""
        try:
            await self.client.send_message(self.owner_chat, self.strings["manual_command"])
        except Exception as e:
            await self.client.send_message(self.owner_chat, f"üö´ ERROR in send_manual_message: {e}")


    
    async def subscribe_public(self, target, mult, delay_s):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–µ."""
        try:
            await self.client(JoinChannelRequest(channel=target))
            await self.send_done_message(f"<b>‚ôªÔ∏è SUB Public:</b> {target}", delay_info=(mult, delay_s))
        except Exception as e:
            await self.send_done_message(f"<b>üö´ SUB Public:</b> {e}", delay_info=(mult, delay_s))

    async def subscribe_private(self, target, mult, delay_s):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —á–∞—Å—Ç–Ω—ã–µ."""
        try:
            invite_hash = target.split("t.me/+")[1]
            await self.client(ImportChatInviteRequest(invite_hash))
            await self.send_done_message(f"<b>‚ôªÔ∏è SUB Private:</b> {target}", delay_info=(mult, delay_s))
        except Exception as e:
            await self.send_done_message(f"<b>üö´ SUB Private:</b> {e}", delay_info=(mult, delay_s))

    
    async def unsubscribe_tag(self, target, mult, delay_s):
        """–û—Ç–ø–∏—Å–∫–∞ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É."""
        try:
            try:
                await self.client(functions.channels.LeaveChannelRequest(target))
                await self.send_done_message(f"<b>‚ôªÔ∏è UNSUB:</b> {target}", delay_info=(mult, delay_s))
            except:
                await self.client.delete_dialog(target)
                await self.send_done_message(f"<b>‚ôªÔ∏è DELETE:</b> {target}", delay_info=(mult, delay_s))
        except Exception as e:
            await self.send_done_message(f"<b>üö´ UNSUB tag:</b> {e}", delay_info=(mult, delay_s))

    async def unsubscribe_link(self, target, mult, delay_s):
        """–û—Ç–ø–∏—Å–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ."""
        try:
            match = re.search(r't\.me/([a-zA-Z0-9_]+)', target)
            if match:
                username = match.group(1)
                try:
                    await self.client(functions.channels.LeaveChannelRequest(username))
                    await self.send_done_message(f"<b>‚ôªÔ∏è UNSUB:</b>\n{target}", delay_info=(mult, delay_s))
                except:
                    await self.client.delete_dialog(username)
                    await self.send_done_message(f"<b>‚ôªÔ∏è DELETE:</b>\n{target}", delay_info=(mult, delay_s))
            else:
                await self.send_done_message("üö´ UNSUB: link not found")
        except Exception as e:
            await self.send_done_message(f"<b>üö´ UNSUB link:</b> {e}", delay_info=(mult, delay_s))

    async def unsubscribe_id(self, target, mult, delay_s):
        """–û—Ç–ø–∏—Å–∫–∞ –ø–æ –∞–π–¥–∏."""
        try:
            try:
                channel_id = int(target)
                await self.client(functions.channels.LeaveChannelRequest(channel_id))
                await self.send_done_message(f"<b>‚ôªÔ∏è UNSUB ID:</b> {target}", delay_info=(mult, delay_s))
            except:
                await self.client.delete_dialog(channel_id)
                await self.send_done_message(f"<b>‚ôªÔ∏è DELETE ID:</b> {target}", delay_info=(mult, delay_s))
        except Exception as e:
            await self.send_done_message(f"<b>üö´ UNSUB ID:</b> {e}", delay_info=(mult, delay_s))


    
    async def button_private(self, target):
        """–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö."""
        try:
            chan, post = target.split("t.me/c/")[1].split("/")
            inline_button = await self.client.get_messages(PeerChannel(int(chan)), ids=int(post))
            click = await inline_button.click(data=inline_button.reply_markup.rows[0].buttons[0].data)
            clicked_message = click.message
            log_message = f"<b>‚ôªÔ∏è BUTTON PUSH:</b> https://t.me/c/{chan}/{post}\n\n{clicked_message}"
            await self.send_done_message(log_message, delay_info=self.get_delay_host())
        except Exception as e:
            await self.send_done_message(f"<b>üö´ ERROR:</b> {e}")

    async def button_public(self, target):
        """–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö."""
        try:
            chan, post = target.split("t.me/")[1].split("/")
            inline_button = await self.client.get_messages(chan, ids=int(post))
            click = await inline_button.click(data=inline_button.reply_markup.rows[0].buttons[0].data)
            clicked_message = click.message
            log_message = f"<b>‚ôªÔ∏è BUTTON PUSH:</b> https://t.me/{chan}/{post}\n\n{clicked_message}"
            await self.send_done_message(log_message, delay_info=self.get_delay_host())
        except Exception as e:
            await self.send_done_message(f"<b>üö´ ERROR:</b> {e}")
            

    async def start_ref_bot(self, bot_name, ref_key):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É."""
        try:
            await self.client(StartBotRequest(bot=bot_name, peer=bot_name, start_param=ref_key))
            await asyncio.sleep(2)
            messages = await self.client.get_messages(bot_name, limit=1)
            response_message = "‚ö†Ô∏è –û—à–∏–±–∫–∞, –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª."
            if messages and messages[0].sender_id == (await self.client.get_input_entity(bot_name)).user_id:
                response_message = messages[0].message
            done_message = f"<b>‚ôªÔ∏è START:</b> @{bot_name}\n\n{response_message}"
            await self.send_done_message(done_message, delay_info=self.get_delay_host())
        except Exception as e:
            error_message = f"<b>üö´ START BOT ERROR:</b> @{bot_name}\n{e}"
            await self.send_done_message(error_message)

    
    async def update_user_config(self, config_name, new_value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–æ–≤."""
        try:
            if config_name not in self.config:
                raise KeyError(f"Config name '{config_name}' not found")
            else:
                if isinstance(self.config[config_name], bool):
                    new_value = new_value.lower() in {'true', '1', 'yes', 'on'}
                elif isinstance(self.config[config_name], int):
                    new_value = int(new_value)
                self.config[config_name] = new_value
                done_message = f"<b>‚ôªÔ∏è CONFIG: {config_name} set to {new_value}.</b>"
                await self.client.send_message(self.owner_chat, done_message)
        except KeyError as e:
            error_message = f"<b>‚ùå Error: {str(e)}</b>"
            await self.client.send_message(self.owner_chat, error_message)
        except Exception as e:
            error_message = f"<b>‚ùå Error updating config: {str(e)}</b>"
            await self.client.send_message(self.owner_chat, error_message)

    

    async def handle_manual(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /manual"""
        try:
            parts = text.split()
            if len(parts) < 2:
                return
            twink = await self.get_user_info()
            if twink is None:
                return
            if len(parts) >= 3 and parts[2] == twink:
                if parts[1] == "basic":
                    await self.send_basic_message()
                elif parts[1] == "command":
                    await self.send_command_message()
            elif parts[1] == twink:
                await self.send_manual_message()
        except:
            pass
    
    async def handle_subscribe(self, text):
        """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ /sub"""
        parts = text.split()
        if len(parts) < 2:
            return
        if parts[1].isdigit():
            mult = int(parts[1])
            target = parts[2].strip()
        else:
            mult = None
            target = parts[1].strip()
        mult, delay_s = self.get_delay_host(mult)
        if 't.me/+' in target:
            await self.delay_host(delay_s)
            await self.subscribe_private(target, mult, delay_s)
        elif "t.me/" in target or "@" in target:
            await self.delay_host(delay_s)
            await self.subscribe_public(target, mult, delay_s)
        else:
            await self.send_error_message("<b>üö´ SUB:</b> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

    async def handle_unsubscribe(self, text):
        """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ /uns"""
        parts = text.split()
        if len(parts) < 2:
            return
        if parts[1].isdigit():
            mult = int(parts[1])
            target = parts[2].strip()
        else:
            mult = None
            target = parts[1].strip()
        mult, delay_s = self.get_delay_host(mult)
        if target.startswith("@"):
            await self.delay_host(delay_s)
            await self.unsubscribe_tag(target, mult, delay_s)
        elif "t.me/" in target:
            await self.delay_host(delay_s)
            await self.unsubscribe_link(target, mult, delay_s)
        elif target.isdigit():
            await self.delay_host(delay_s)
            await self.unsubscribe_id(target, mult, delay_s)
        else:
            await self.send_done_message("<b>üö´ UNSUB:</b> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

    async def handle_runner(self, text):
        """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ /run"""
        try:
            parts = text.split()
            if len(parts) < 2:
                return
            target = parts[1].strip()
            if 't.me/c/' in target:
                await self.delay_host()
                await self.button_private(target)
            elif 't.me/' in target:
                await self.delay_host()
                await self.button_public(target)
            else:
                await self.send_done_message(f"<b>üö´ RUN ERROR:</b> {target}")
        except Exception as e:
            await self.send_done_message(f"üö´ ERROR in handle_runner: {e}")
            
    async def handle_referal(self, text):
        """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ /ref"""
        bot_name = None
        ref_key = None
        sup_bot = [
            "BestRandom_bot", "best_contests_bot", "GiveawayLuckyBot",
            "TheFastes_Bot", "TheFastesRuBot"
        ]
        parts = text.split()
        if len(parts) < 2:
            return
        target = parts[1]
        for bot in sup_bot:
            if bot in target:
                bot_name = bot
                break
        if bot_name:
            match = re.search(r"\?start=([\w-]+)", text)
            if match:
                ref_key = match[1]
                await self.delay_host()
                await self.start_ref_bot(bot_name, ref_key)
            else:
                await self.send_done_message(f"<b>üö´ REFERAL ERROR:</b> ref_key –¥–ª—è @{bot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await self.send_done_message(f"<b>üö´ REFERAL ERROR:</b> –±–æ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –≤: {text}")
    
    async def handle_user_config(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ USER –∫–æ–º–∞–Ω–¥—ã /config"""
        parts = text.split()
        if len(parts) < 3:
            return
        twink = await self.get_user_info()
        if parts[1] == "set":
            if len(parts) < 4:
                return
            config_name = parts[2]
            new_value = parts[3]
            taglist = parts[4:]
            if "all" in taglist:
                await self.update_user_config(config_name, new_value)
            else:
                for tag in taglist:
                    if tag == twink:
                        await self.update_user_config(config_name, new_value)
        elif parts[1] == "self":
            taglist = parts[2:]
            if "all" in taglist or any(tag == twink for tag in taglist):
                await self.send_config_message()
        else:
            return

    async def handle_user_search(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ USER –∫–æ–º–∞–Ω–¥—ã /search"""        
        parts = text.split()
        if len(parts) < 2:
            return
        twink = await self.get_user_info()
        twink_search = parts[1:]
        for tag in twink_search:
            if tag == twink:
                await self.client.send_message(self.owner_chat, f"—ç—Ç–æ —è –Ω–∞—Ö—É {twink}")

    
    @loader.watcher()
    async def watcher_group(self, message):
        """Handle commands calling"""
        if message.chat_id != self.owner_chat:
            return
        if message.sender_id not in self.owner_list:
            return
        try:
            if message.message.startswith("/sub"):
                await self.handle_subscribe(message.message)
            elif message.message.startswith("/uns"):
                await self.handle_unsubscribe(message.message)
            elif message.message.startswith("/run"):
                await self.handle_runner(message.message)
            elif message.message.startswith("/ref"):
                await self.handle_referal(message.message)
            elif message.message.startswith("/manual"):
                await self.handle_manual(message.message)
            elif message.message.startswith("/config"):
                await self.handle_user_config(message.message)
            elif message.message.startswith("/search"):
                await self.handle_user_search(message.message)
        except:
            pass
