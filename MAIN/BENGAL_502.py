import re
from telethon.tl import functions
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.functions.channels import LeaveChannelRequest

import asyncio
from .. import loader

@loader.tds
class BENGALSOFTMod(loader.Module):
    """–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏.
           Commands: /manual @\n
    ‚öôÔ∏è By @pavlyxa_rezon\n"""

    strings = {
        "name": "BENGALSOFT",
        "manual_main": (
            "<b>‚öôÔ∏è BENGALSOFT for BENGAL\nüíª By @pavlyxa_rezon\n\n"
            "<b>–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.</b>"
        ),
        "manual_basic": (
            "<b>üîó –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:</b>\n"
            "‚ñ™Ô∏è–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ —É—Å–ª–æ–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–æ–∏—Ç –≥—Ä—É–ø–ø–∞ 1). "
            "–î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å—Ç–∞–≤–∏–º –∫–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–ø–æ 15-20 –∞–∫–∫–∞—É–Ω—Ç–æ–≤). "
            "–≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –≤ –•*20 —Å–µ–∫—É–Ω–¥.\n\n"
            "‚ñ™Ô∏è–î–∞–ª–µ–µ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–æ). "
            "–¢–∞–∫ –ª–æ–≥–∏ –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä—è–º–æ –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É.\n\n"
            "<b>üîó –ö–æ–Ω—Ñ–∏–≥: /reconf [name] [value] [acc]</b>\n"
            "‚ñ™Ô∏èlogger ‚Äî –±—É–ª–µ–≤—ã–π —Å—Ç–∞—Ç—É—Å (True/False, 1/0, yes/no).\n"
            "‚ñ™Ô∏ègroup ‚Äî –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
            "‚ñ™Ô∏èacc ‚Äî –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —é–∑–µ—Ä–æ–≤, –≥–¥–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ (all –¥–ª—è –≤—Å–µ—Ö).\n"
        ),
        "manual_channels": (
            "<b>–¢–µ–∫—É—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–¥—É–ª—è:</b>\n\n"
            "<b>üîó SUBSCRIBE: /sub [target]</b>\n"
            "‚ñ™Ô∏èPUBLIC: https://t.me/, t.me/, @\n"
            "‚ñ™Ô∏èPRIVATE: https://t.me/+, t.me/+\n\n"
            "<b>üîó UNSUBSCRIBE: /uns [target]</b>\n"
            "‚ñ™Ô∏èPUBLIC: https://t.me/, t.me/, @\n"
            "‚ñ™Ô∏èPRIVATE: ID –±–µ–∑ –º–∏–Ω—É—Å–∞ —Å 100.\n\n"
            "<b>–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è –º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∏ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –ª—é–±—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø.</b>"
        )
    }
    
    def __init__(self):
        self.owner_list = [922318957]
        self.owner_chat = -1002205010643
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "logger", False, "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ª–æ–≥–≥–µ—Ä–∞.",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "group", 1, "–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∞–∫–∫–æ–≤.",
                validator=loader.validators.Integer(),
            )
        )

    async def delay_host(self):
        """–ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"""
        delay_seconds = self.get_delay_host()
        await asyncio.sleep(delay_seconds)
        return delay_seconds
    
    def get_delay_host(self):
        """–ó–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
        delay_seconds = self.config["group"] * 20
        return delay_seconds
        
    def get_manual_config(self):
        """–ó–Ω–∞—á–µ–Ω–∏–µ manual_config."""
        config_string = ''.join([f"‚ñ™Ô∏è<b>{key}</b> ‚Äî {value}.\n" for key, value in self.config.items()])
        manual_config = (
            "<b>‚öôÔ∏è BGL-CHANNELS CONFIG</b>\n\n"
            "<b>–ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
            f"‚ñ™Ô∏è<b>owner_list</b> ‚Äî {self.owner_list}.\n"
            f"‚ñ™Ô∏è<b>owner_chat</b> ‚Äî {self.owner_chat}.\n\n"
            "<b>–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n" +
            config_string +
            "\n–ü—Ä–∏–º–µ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n"
            "/reconf logger True @user1 @user2\n/reconf group 2 all"
        )
        return (manual_config)
    

    async def send_module_message(self, text, delay_info=None):
        """–õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥—É–ª—è"""
        if not self.config["logger"]:
            return
        if not self.owner_chat:
            return
        try:
            delay_text = f", Delay: {delay_info} —Å–µ–∫" if delay_info else ", Delay: 0."
            logger_message = f"üíª <b>Server: {self.config['group']}{delay_text}</b>\n\n{text}"
            await self.client.send_message(self.owner_chat, logger_message, link_preview=False)
        except:
            pass
        
    async def send_manual_message(self):
        """–í—ã–≤–æ–¥ –º–∞–Ω—É–∞–ª–∞ –ø–æ –º–æ–¥—É–ª—é"""
        try:
            image_url = "https://raw.githubusercontent.com/BENGALX/SOFT/bengal/IMAGE/BENGAL.jpg"
            await self.client.send_file(
                self.owner_chat,
                file=image_url,
                caption=self.strings["manual_main"]
            )
            await asyncio.sleep(2)
            await self.client.send_message(self.owner_chat, self.strings["manual_basic"])
            await asyncio.sleep(2)
            await self.client.send_message(self.owner_chat, self.get_manual_config(manual_config))
            await asyncio.sleep(2)
            await self.client.send_message(self.owner_chat, self.strings["manual_channels"])
        except Exception as e:
            await self.client.send_message(self.owner_chat, f"üö´ ERROR in send_manual_message: {e}")

    
    async def subscribe_public(self, target):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–µ."""
        done_message = f"<b>‚úÖ SUBSCRIBE (Public):</b> {target}"
        fail_message = f"<b>üö´ SUB ERROR (Public):</b> "
        try:
            await self.client(JoinChannelRequest(channel=target))
            await self.send_module_message(done_message, delay_info=self.get_delay_host())
        except Exception as e:
            await self.send_module_message(f"{fail_message}\n{e}")

    async def subscribe_private(self, target):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —á–∞—Å—Ç–Ω—ã–µ."""
        done_message = f"<b>‚úÖ SUBSCRIBE (Private):</b> {target}"
        fail_message = f"<b>üö´ SUB ERROR (Private):</b> "
        try:
            invite_hash = target.split("t.me/+")[1]
            await self.client(ImportChatInviteRequest(invite_hash))
            await self.send_module_message(done_message, delay_info=self.get_delay_host())
        except Exception as e:
            await self.send_module_message(f"{fail_message}\n{e}")

    
    async def unsubscribe_by_tag(self, target):
        """–û—Ç–ø–∏—Å–∫–∞ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É."""
        done_message = f"<b>‚úÖ UNSUBSCRIBE:</b> {target}"
        user_message = f"<b>‚úÖ DELETE:</b> {target}"
        try:
            await self.client(functions.channels.LeaveChannelRequest(target))
            await self.send_module_message(done_message, delay_info=self.get_delay_host())
        except:
            await self.client.delete_dialog(target)
            await self.send_module_message(user_message, delay_info=self.get_delay_host())

    async def unsubscribe_by_link(self, target):
        """–û—Ç–ø–∏—Å–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ."""
        match = re.search(r't\.me/([a-zA-Z0-9_]+)', target)
        done_message = f"<b>‚úÖ UNSUBSCRIBE:</b>\n{target}"
        user_message = f"<b>‚úÖ DELETE:</b>\n{target}"
        if match:
            username = match.group(1)
            try:
                await self.client(functions.channels.LeaveChannelRequest(username))
                await self.send_module_message(done_message, delay_info=self.get_delay_host())
            except:
                await self.client.delete_dialog(username)
                await self.send_module_message(user_message, delay_info=self.get_delay_host())
        else:
            await self.send_module_message("üö´ UNSUBSCRIBE error")

    async def unsubscribe_by_id(self, target):
        """–û—Ç–ø–∏—Å–∫–∞ –ø–æ –∞–π–¥–∏."""
        done_message = f"<b>‚úÖ UNSUBSCRIBE ID:</b> {target}"
        user_message = f"<b>‚úÖ DELETE ID:</b> {target}"
        try:
            channel_id = int(target)
            await self.client(functions.channels.LeaveChannelRequest(channel_id))
            await self.send_module_message(done_message, delay_info=self.get_delay_host())
        except:
            await self.client.delete_dialog(channel_id)
            await self.send_module_message(user_message, delay_info=self.get_delay_host())
            

    async def start_bestrandom_bot(self, text):
        if match := re.search(r"\?start=(\w+)", text):
            ref_key = match[1]
            await self.client(StartBotRequest(bot="BestRandom_bot", peer="BestRandom_bot", start_param=ref_key))

    async def start_fastes_bot(self, text):
        if match := re.search(r"\?start=(\w+)", text):
            ref_key = match[1]
            await self.client(StartBotRequest(bot="TheFastes_Bot", peer="TheFastes_Bot", start_param=ref_key))

    async def start_fastesru_bot(self, text):
        if match := re.search(r"\?start=(\w+)", text):
            ref_key = match[1]
            await self.client(StartBotRequest(bot="TheFastesRuBot", peer="TheFastesRuBot", start_param=ref_key))

    async def start_givelucky_bot(self, text):
        if match := re.search(r"\?start=([\w-]+)", text):
            ref_key = match[1]
            await self.client(StartBotRequest(bot="GiveawayLuckyBot", peer="GiveawayLuckyBot", start_param=ref_key))

    async def start_best_contests_bot(self, text):
        if match := re.search(r"\?start=([\w-]+)", text):
            ref_key = match[1]
            await self.client(StartBotRequest(bot="best_contests_bot", peer="best_contests_bot", start_param=ref_key))

    
    async def update_user_config(self, config_name, new_value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        if config_name not in self.config:
            return
        else:
            if isinstance(self.config[config_name], bool):
                new_value = new_value.lower() in ['true', '1', 'yes']
            elif isinstance(self.config[config_name], int):
                new_value = int(new_value)
            self.config[config_name] = new_value
            done_message = f"<b>‚úÖ CONFIG: {config_name} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_value}.</b>"
            await self.client.send_message(self.owner_chat, done_message)

    

    async def handle_manual(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /manual"""
        try:
            parts = text.split()
            if len(parts) < 2:
                return
            user = await self.client.get_me()
            if parts[1] != f"@{user.username}":
                return
            await self.send_manual_message()
        except Exception as e:
            await self.client.send_message(self.owner_chat, f"üö´ ERROR in handle_manual: {e}")
    
    async def handle_subscribe(self, text):
        """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ /sub"""
        target = text.split("/sub", 1)[1].strip()
        await self.delay_host()
        if 't.me/+' in target:
            await self.subscribe_private(target)
        elif "t.me/" in target or "@" in target:
            await self.subscribe_public(target)
        else:
            await self.send_module_message("<b>üö´ SUBSCRIBE ERROR:</b> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

    async def handle_unsubscribe(self, text):
        """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ /uns"""
        target = text.split("/uns", 1)[1].strip()
        await self.delay_host()
        if target.startswith("@"):
            await self.unsubscribe_by_tag(target)
        elif "t.me/" in target:
            await self.unsubscribe_by_link(target)
        elif target.isdigit():
            await self.unsubscribe_by_id(target)
        else:
            await self.send_module_message("<b>üö´ UNSUBSCRIBE ERROR:</b> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            
    async def handle_referal(self, text):
        """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ /ref"""
        linka = text.split("/ref", 1)[1].strip()
        if "BestRandom_bot" in text:
            await self.start_bestrandom_bot(text)
        elif "TheFastes_Bot" in text:
            await self.start_fastes_bot(text)
        elif "TheFastesRuBot" in text:
            await self.start_fastesru_bot(text)
        elif "GiveawayLuckyBot" in text:
            await self.start_givelucky_bot(text)
        elif "best_contests_bot" in text:
            await self.start_best_contests_bot(text)
        else:
            await self.send_module_message("<b>üö´ REFERAL ERROR:</b> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

    async def handle_user_config(self, text):
        """USER configuration of module"""
        parts = text.split()
        if len(parts) < 4:
            return
        config_name = parts[1]
        new_value = parts[2]
        taglist = parts[3:]
        user = await self.client.get_me()
        if "all" in taglist:
            await self.update_user_config(config_name, new_value)
        else:
            for tag in taglist:
                if tag == f"@{user.username}":
                    await self.update_user_config(config_name, new_value)
    
    @loader.watcher()
    async def watcher_group(self, message):
        """Handle commands calling"""
        if message.chat_id != self.owner_chat:
            return
        if message.sender_id not in self.owner_list:
            return
        if message.message.startswith("/"):
            return
        
        try:
            if message.message.startswith("/sub"):
                await self.handle_subscribe(message.message)
            elif message.message.startswith("/uns"):
                await self.handle_unsubscribe(message.message)
            elif message.message.startswith("/ref"):
                await self.handle_referal(message.message)
            elif message.message.startswith("/reconf"):
                await self.handle_user_config(message.message)
            elif message.message.startswith("/manual"):
                await self.handle_manual(message.message)
        except:
            pass
